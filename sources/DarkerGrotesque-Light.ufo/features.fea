# Prefix: Languagesystems
# automatic
languagesystem DFLT dflt;
languagesystem latn dflt;
languagesystem latn ROM;
languagesystem latn MOL;
languagesystem latn KAZ;
languagesystem latn TAT;
languagesystem latn TRK;
languagesystem latn CRT;
languagesystem latn AZE;


feature aalt {
feature ccmp;
feature locl;
feature numr;
feature dnom;
feature frac;
feature salt;
feature ss01;

} aalt;

feature ccmp {
# automatic
lookup ccmp_Other_1 {
	@CombiningTopAccents = [acutecomb brevecomb caroncomb circumflexcomb commaturnedabovecomb dieresiscomb dotaccentcomb gravecomb hookabovecomb hungarumlautcomb macroncomb ringcomb tildecomb];
	@CombiningNonTopAccents = [cedillacomb dotbelowcomb ogonekcomb horncomb];
	sub [i]' @CombiningTopAccents by [idotless];
	sub [i]' @CombiningNonTopAccents @CombiningTopAccents by [idotless];
} ccmp_Other_1;

lookup ccmp_latn_1 {
	lookupflag 0;
	sub brevecomb acutecomb by brevecomb_acutecomb;
	sub brevecomb gravecomb by brevecomb_gravecomb;
	sub brevecomb hookabovecomb by brevecomb_hookabovecomb;
	sub brevecomb tildecomb by brevecomb_tildecomb;
	sub circumflexcomb acutecomb by circumflexcomb_acutecomb;
	sub circumflexcomb gravecomb by circumflexcomb_gravecomb;
	sub circumflexcomb hookabovecomb by circumflexcomb_hookabovecomb;
	sub circumflexcomb tildecomb by circumflexcomb_tildecomb;
} ccmp_latn_1;

script latn;

} ccmp;

feature locl {
# automatic
script latn;
language ROM;
sub Scedilla by Scommaaccent;
sub scedilla by scommaaccent;
sub Tcedilla by Tcommaaccent;
sub tcedilla by tcommaaccent;
language MOL;
sub Scedilla by Scommaaccent;
sub scedilla by scommaaccent;
sub Tcedilla by Tcommaaccent;
sub tcedilla by tcommaaccent;
language KAZ;
sub i by idotaccent;
language TAT;
sub i by idotaccent;
language TRK;
sub i by idotaccent;
language CRT;
sub i by idotaccent;
language AZE;
sub i by idotaccent;

} locl;

feature subs {
# automatic
sub zero by zero.subs;
sub one by one.subs;
sub two by two.subs;
sub three by three.subs;
sub four by four.subs;
sub five by five.subs;
sub six by six.subs;
sub seven by seven.subs;
sub eight by eight.subs;
sub nine by nine.subs;

} subs;

feature sinf {
# automatic
sub zero by zero.subs;
sub one by one.subs;
sub two by two.subs;
sub three by three.subs;
sub four by four.subs;
sub five by five.subs;
sub six by six.subs;
sub seven by seven.subs;
sub eight by eight.subs;
sub nine by nine.subs;

} sinf;

feature sups {
# automatic
sub zero by zero.sups;
sub one by one.sups;
sub two by two.sups;
sub three by three.sups;
sub four by four.sups;
sub five by five.sups;
sub six by six.sups;
sub seven by seven.sups;
sub eight by eight.sups;
sub nine by nine.sups;

} sups;

feature numr {
# automatic
sub zero by zero.numr;
sub one by one.numr;
sub two by two.numr;
sub three by three.numr;
sub four by four.numr;
sub five by five.numr;
sub six by six.numr;
sub seven by seven.numr;
sub eight by eight.numr;
sub nine by nine.numr;

} numr;

feature dnom {
# automatic
sub zero by zero.dnom;
sub one by one.dnom;
sub two by two.dnom;
sub three by three.dnom;
sub four by four.dnom;
sub five by five.dnom;
sub six by six.dnom;
sub seven by seven.dnom;
sub eight by eight.dnom;
sub nine by nine.dnom;

} dnom;

feature frac {
# automatic
lookup FRAC {
	sub slash by fraction;
} FRAC;
lookup UP {
	sub [zero one two three four five six seven eight nine] by [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr];
} UP;
lookup DOWN {
	sub fraction [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr]' by [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];
	sub [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom] [zero.numr one.numr two.numr three.numr four.numr five.numr six.numr seven.numr eight.numr nine.numr]' by [zero.dnom one.dnom two.dnom three.dnom four.dnom five.dnom six.dnom seven.dnom eight.dnom nine.dnom];
} DOWN;

} frac;

feature case {
# automatic
sub periodcentered by periodcentered.case;
sub bullet by bullet.case;
sub parenleft by parenleft.case;
sub parenright by parenright.case;
sub braceleft by braceleft.case;
sub braceright by braceright.case;
sub bracketleft by bracketleft.case;
sub bracketright by bracketright.case;
sub hyphen by hyphen.case;
sub endash by endash.case;
sub emdash by emdash.case;
sub plus by plus.case;
sub minus by minus.case;
sub equal by equal.case;
sub notequal by notequal.case;
sub greater by greater.case;
sub less by less.case;
sub asciitilde by asciitilde.case;

} case;

feature dlig {
# automatic
sub N o by N_o.dlig;
sub colon parenleft by colon_parenleft.dlig;
sub colon parenright by colon_parenright.dlig;
sub f f by f_f.dlig;
sub f i by f_i.dlig;
sub f t by f_t.dlig;
sub hyphen greater by hyphen_greater.dlig;
sub less hyphen by less_hyphen.dlig;
sub less three by less_three.dlig;
sub parenleft greater by parenleft_greater.dlig;
sub t t by t_t.dlig;

} dlig;

feature liga {
# automatic
sub w w w by w_w_w.liga;

} liga;

feature salt {
# automatic
sub I by I.ss01;
sub a by a.ss01;
sub aacute by aacute.ss01;
sub abreve by abreve.ss01;
sub abreveacute by abreveacute.ss01;
sub abrevedotbelow by abrevedotbelow.ss01;
sub abrevegrave by abrevegrave.ss01;
sub abrevehookabove by abrevehookabove.ss01;
sub abrevetilde by abrevetilde.ss01;
sub acircumflex by acircumflex.ss01;
sub acircumflexacute by acircumflexacute.ss01;
sub acircumflexdotbelow by acircumflexdotbelow.ss01;
sub acircumflexgrave by acircumflexgrave.ss01;
sub acircumflexhookabove by acircumflexhookabove.ss01;
sub acircumflextilde by acircumflextilde.ss01;
sub adieresis by adieresis.ss01;
sub adotbelow by adotbelow.ss01;
sub agrave by agrave.ss01;
sub ahookabove by ahookabove.ss01;
sub amacron by amacron.ss01;
sub aogonek by aogonek.ss01;
sub aring by aring.ss01;
sub atilde by atilde.ss01;
sub f by f.ss01;
sub g by g.ss01;
sub gbreve by gbreve.ss01;
sub gcommaaccent by gcommaaccent.ss01;
sub gdotaccent by gdotaccent.ss01;
sub lcaron by lcaron.ss01;
sub x by x.ss01;

} salt;

feature ss01 {
# automatic
sub I by I.ss01;
sub a by a.ss01;
sub aacute by aacute.ss01;
sub abreve by abreve.ss01;
sub abreveacute by abreveacute.ss01;
sub abrevedotbelow by abrevedotbelow.ss01;
sub abrevegrave by abrevegrave.ss01;
sub abrevehookabove by abrevehookabove.ss01;
sub abrevetilde by abrevetilde.ss01;
sub acircumflex by acircumflex.ss01;
sub acircumflexacute by acircumflexacute.ss01;
sub acircumflexdotbelow by acircumflexdotbelow.ss01;
sub acircumflexgrave by acircumflexgrave.ss01;
sub acircumflexhookabove by acircumflexhookabove.ss01;
sub acircumflextilde by acircumflextilde.ss01;
sub adieresis by adieresis.ss01;
sub adotbelow by adotbelow.ss01;
sub agrave by agrave.ss01;
sub ahookabove by ahookabove.ss01;
sub amacron by amacron.ss01;
sub aogonek by aogonek.ss01;
sub aring by aring.ss01;
sub atilde by atilde.ss01;
sub f by f.ss01;
sub g by g.ss01;
sub gbreve by gbreve.ss01;
sub gcommaaccent by gcommaaccent.ss01;
sub gdotaccent by gdotaccent.ss01;
sub lcaron by lcaron.ss01;
sub x by x.ss01;

} ss01;
